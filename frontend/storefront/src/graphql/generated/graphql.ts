// This file is auto-generated by GraphQL Codegen
// It will be regenerated when you run the codegen command

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };

// Basic types
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  DateTime: any;
  Date: any;
  JSON: any;
  UUID: string;
  Decimal: any;
  PositiveDecimal: any;
};

// Product types
export type Product = {
  __typename?: 'Product';
  id: Scalars['ID'];
  name: Scalars['String'];
  slug: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  thumbnail?: Maybe<Image>;
  pricing?: Maybe<ProductPricingInfo>;
  variants: Array<ProductVariant>;
  attributes: Array<SelectedAttribute>;
  productType: ProductType;
};

export type ProductVariant = {
  __typename?: 'ProductVariant';
  id: Scalars['ID'];
  name: Scalars['String'];
  sku: Scalars['String'];
  pricing?: Maybe<VariantPricingInfo>;
  attributes: Array<SelectedAttribute>;
  quantityAvailable: Scalars['Int'];
};

export type ProductType = {
  __typename?: 'ProductType';
  id: Scalars['ID'];
  name: Scalars['String'];
  slug: Scalars['String'];
};

export type ProductPricingInfo = {
  __typename?: 'ProductPricingInfo';
  priceRange?: Maybe<TaxedMoneyRange>;
  discount?: Maybe<TaxedMoney>;
};

export type VariantPricingInfo = {
  __typename?: 'VariantPricingInfo';
  price?: Maybe<TaxedMoney>;
  discount?: Maybe<TaxedMoney>;
};

export type TaxedMoney = {
  __typename?: 'TaxedMoney';
  gross: Money;
  net: Money;
};

export type TaxedMoneyRange = {
  __typename?: 'TaxedMoneyRange';
  start?: Maybe<TaxedMoney>;
  stop?: Maybe<TaxedMoney>;
};

export type Money = {
  __typename?: 'Money';
  amount: Scalars['Float'];
  currency: Scalars['String'];
};

export type Image = {
  __typename?: 'Image';
  url: Scalars['String'];
  alt?: Maybe<Scalars['String']>;
};

export type SelectedAttribute = {
  __typename?: 'SelectedAttribute';
  attribute: Attribute;
  values: Array<AttributeValue>;
};

export type Attribute = {
  __typename?: 'Attribute';
  id: Scalars['ID'];
  name: Scalars['String'];
  slug: Scalars['String'];
  inputType: AttributeInputTypeEnum;
};

export type AttributeValue = {
  __typename?: 'AttributeValue';
  id: Scalars['ID'];
  name: Scalars['String'];
  slug: Scalars['String'];
  richText?: Maybe<Scalars['String']>;
  file?: Maybe<File>;
};

export type File = {
  __typename?: 'File';
  url: Scalars['String'];
  contentType?: Maybe<Scalars['String']>;
};

export enum AttributeInputTypeEnum {
  DROPDOWN = 'DROPDOWN',
  MULTISELECT = 'MULTISELECT',
  SWATCH = 'SWATCH',
  RICH_TEXT = 'RICH_TEXT',
  FILE = 'FILE',
  REFERENCE = 'REFERENCE',
  PLAIN_TEXT = 'PLAIN_TEXT',
  DATE = 'DATE',
  DATE_TIME = 'DATE_TIME',
  BOOLEAN = 'BOOLEAN',
  NUMERIC = 'NUMERIC'
}

// Checkout types
export type Checkout = {
  __typename?: 'Checkout';
  id: Scalars['ID'];
  token: Scalars['UUID'];
  totalPrice?: Maybe<TaxedMoney>;
  subtotalPrice?: Maybe<TaxedMoney>;
  lines: Array<CheckoutLine>;
  shippingAddress?: Maybe<Address>;
  billingAddress?: Maybe<Address>;
  availableShippingMethods: Array<ShippingMethod>;
  shippingMethod?: Maybe<ShippingMethod>;
  email?: Maybe<Scalars['String']>;
};

export type CheckoutLine = {
  __typename?: 'CheckoutLine';
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  totalPrice?: Maybe<TaxedMoney>;
  variant: ProductVariant;
};

export type Address = {
  __typename?: 'Address';
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  streetAddress1: Scalars['String'];
  city: Scalars['String'];
  country: CountryDisplay;
  postalCode: Scalars['String'];
};

export type CountryDisplay = {
  __typename?: 'CountryDisplay';
  code: Scalars['String'];
  country: Scalars['String'];
};

export type ShippingMethod = {
  __typename?: 'ShippingMethod';
  id: Scalars['ID'];
  name: Scalars['String'];
  price?: Maybe<Money>;
};

// Query types
export type ProductFilterInput = {
  productType?: InputMaybe<ProductTypeFilterInput>;
  attributes?: InputMaybe<Array<AttributeInput>>;
  search?: InputMaybe<Scalars['String']>;
};

export type ProductTypeFilterInput = {
  slug?: InputMaybe<Scalars['String']>;
};

export type AttributeInput = {
  slug: Scalars['String'];
  values?: InputMaybe<Array<Scalars['String']>>;
};

// Fragment types
export type ProductDetailsFragment = Product;
export type ProductVariantFragment = ProductVariant;
export type CheckoutDetailsFragment = Checkout;
export type CheckoutLineFragment = CheckoutLine;

// Mutation input types
export type CheckoutCreateInput = {
  channel: Scalars['String'];
  email?: InputMaybe<Scalars['String']>;
  lines?: InputMaybe<Array<CheckoutLineInput>>;
};

export type CheckoutLineInput = {
  variantId: Scalars['ID'];
  quantity: Scalars['Int'];
};

export type CheckoutLineUpdateInput = {
  lineId: Scalars['ID'];
  quantity: Scalars['Int'];
};

// Error types
export type Error = {
  __typename?: 'Error';
  field?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  code: ErrorCodeEnum;
};

export enum ErrorCodeEnum {
  GRAPHQL_ERROR = 'GRAPHQL_ERROR',
  INVALID = 'INVALID',
  NOT_FOUND = 'NOT_FOUND',
  REQUIRED = 'REQUIRED',
  UNIQUE = 'UNIQUE'
}

