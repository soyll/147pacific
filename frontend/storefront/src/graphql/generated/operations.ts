// This file is auto-generated by GraphQL Codegen
// It will be regenerated when you run the codegen command

import { gql } from '@apollo/client';

// Fragments
export const ProductVariantFragmentDoc = gql`
    fragment ProductVariantFragment on ProductVariant {
  id
  sku
  name
  pricing {
    price {
      net {
        amount
        currency
      }
    }
  }
  attributes {
    attribute {
      id
      name
    }
    values {
      id
      name
    }
  }
}
    `;

export const ProductDetailsFragmentDoc = gql`
    fragment ProductDetailsFragment on Product {
  id
  name
  slug
  description
  thumbnail {
    url
    alt
  }
  pricing {
    priceRange {
      start {
        net {
          amount
          currency
        }
      }
      stop {
        net {
          amount
          currency
        }
      }
    }
  }
  variants {
    ...ProductVariantFragment
  }
  attributes {
    attribute {
      id
      name
    }
    values {
      id
      name
    }
  }
  productType {
    id
    name
  }
}
    ${ProductVariantFragmentDoc}`;

export const CheckoutLineFragmentDoc = gql`
    fragment CheckoutLineFragment on CheckoutLine {
  id
  quantity
  totalPrice {
    gross {
      amount
      currency
    }
  }
  variant {
    id
    sku
    name
    product {
      id
      name
      thumbnail {
        url
        alt
      }
    }
    pricing {
      price {
        net {
          amount
          currency
        }
      }
    }
  }
}
    `;

export const CheckoutDetailsFragmentDoc = gql`
    fragment CheckoutDetailsFragment on Checkout {
  id
  token
  totalPrice {
    gross {
      amount
      currency
    }
  }
  subtotalPrice {
    gross {
      amount
      currency
    }
  }
  lines {
    ...CheckoutLineFragment
  }
  shippingAddress {
    firstName
    lastName
    streetAddress1
    city
    country {
      code
      country
    }
    postalCode
  }
  billingAddress {
    firstName
    lastName
    streetAddress1
    city
    country {
      code
      country
    }
    postalCode
  }
  availableShippingMethods {
    id
    name
    price {
      amount
      currency
    }
  }
  shippingMethod {
    id
    name
    price {
      amount
      currency
    }
  }
  email
}
    ${CheckoutLineFragmentDoc}`;

// Queries
export const GetAutoAccessoryProductsDocument = gql`
    query GetAutoAccessoryProducts($first: Int, $after: String, $filter: ProductFilterInput, $channel: String!) {
  products(first: $first, after: $after, filter: $filter, channel: $channel) {
    pageInfo {
      hasNextPage
      endCursor
    }
    edges {
      node {
        ...ProductDetailsFragment
      }
    }
  }
}
    ${ProductDetailsFragmentDoc}`;

export const GetAutoAccessoryProductDocument = gql`
    query GetAutoAccessoryProduct($id: ID, $slug: String, $channel: String!) {
  product(id: $id, slug: $slug, channel: $channel) {
    ...ProductDetailsFragment
  }
}
    ${ProductDetailsFragmentDoc}`;

export const CheckoutDetailsDocument = gql`
    query CheckoutDetails($token: UUID!) {
  checkout(token: $token) {
    ...CheckoutDetailsFragment
  }
}
    ${CheckoutDetailsFragmentDoc}`;

// Mutations
export const CheckoutCreateDocument = gql`
    mutation CheckoutCreate($input: CheckoutCreateInput!) {
  checkoutCreate(input: $input) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      message
      field
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const CheckoutLinesAddDocument = gql`
    mutation CheckoutLinesAdd($token: UUID!, $lines: [CheckoutLineInput!]!) {
  checkoutLinesAdd(token: $token, lines: $lines) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      message
      field
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const CheckoutLinesUpdateDocument = gql`
    mutation CheckoutLinesUpdate($token: UUID!, $lines: [CheckoutLineUpdateInput!]!) {
  checkoutLinesUpdate(token: $token, lines: $lines) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      message
      field
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const CheckoutLinesDeleteDocument = gql`
    mutation CheckoutLinesDelete($token: UUID!, $lines: [ID!]!) {
  checkoutLinesDelete(token: $token, lines: $lines) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      message
      field
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const CheckoutCompleteDocument = gql`
    mutation CheckoutComplete($token: UUID!) {
  checkoutComplete(token: $token) {
    order {
      id
      number
    }
    errors {
      message
      field
    }
  }
}
    `;

export const TokenCreateDocument = gql`
    mutation TokenCreate($email: String!, $password: String!) {
  tokenCreate(email: $email, password: $password) {
    token
    refreshToken
    errors {
      message
      field
    }
  }
}
    `;

export const TokenRefreshDocument = gql`
    mutation TokenRefresh($refreshToken: String!) {
  tokenRefresh(refreshToken: $refreshToken) {
    token
    refreshToken
    errors {
      message
      field
    }
  }
}
    `;

// Additional queries and mutations for auth and checkout
export const GetCurrentUserDocument = gql`
    query GetCurrentUser {
  me {
    id
    email
    firstName
    lastName
    isActive
    dateJoined
    lastLogin
  }
}
    `;

export const GetUserOrdersDocument = gql`
    query GetUserOrders($first: Int, $after: String) {
  me {
    orders(first: $first, after: $after) {
      pageInfo {
        hasNextPage
        endCursor
      }
      edges {
        node {
          id
          number
          status
          created
          total {
            gross {
              amount
              currency
            }
          }
        }
      }
    }
  }
}
    `;

export const GetOrderDetailsDocument = gql`
    query GetOrderDetails($id: ID!) {
  order(id: $id) {
    id
    number
    status
    created
    total {
      gross {
        amount
        currency
      }
    }
    lines {
      id
      productName
      variantName
      quantity
      unitPrice {
        gross {
          amount
          currency
        }
      }
    }
  }
}
    `;

export const RegisterUserDocument = gql`
    mutation RegisterUser($input: AccountRegisterInput!) {
  accountRegister(input: $input) {
    user {
      id
      email
      firstName
      lastName
    }
    errors {
      field
      message
    }
    requiresConfirmation
  }
}
    `;

export const LoginUserDocument = gql`
    mutation LoginUser($email: String!, $password: String!) {
  tokenCreate(email: $email, password: $password) {
    token
    refreshToken
    user {
      id
      email
      firstName
      lastName
    }
    errors {
      field
      message
    }
  }
}
    `;

export const RefreshTokenDocument = gql`
    mutation RefreshToken($refreshToken: String!) {
  tokenRefresh(refreshToken: $refreshToken) {
    token
    refreshToken
    errors {
      field
      message
    }
  }
}
    `;

export const LogoutUserDocument = gql`
    mutation LogoutUser {
  tokenDelete {
    errors {
      field
      message
    }
  }
}
    `;

export const ChangePasswordDocument = gql`
    mutation ChangePassword($newPassword: String!, $oldPassword: String!) {
  passwordChange(newPassword: $newPassword, oldPassword: $oldPassword) {
    errors {
      field
      message
    }
  }
}
    `;

export const RequestPasswordResetDocument = gql`
    mutation RequestPasswordReset($email: String!, $redirectUrl: String!) {
  requestPasswordReset(email: $email, redirectUrl: $redirectUrl) {
    errors {
      field
      message
    }
  }
}
    `;

export const ConfirmPasswordResetDocument = gql`
    mutation ConfirmPasswordReset($email: String!, $password: String!, $token: String!) {
  confirmAccount(email: $email, password: $password, token: $token) {
    errors {
      field
      message
    }
  }
}
    `;

export const UpdateUserAccountDocument = gql`
    mutation UpdateUserAccount($input: AccountInput!) {
  accountUpdate(input: $input) {
    user {
      id
      email
      firstName
      lastName
    }
    errors {
      field
      message
    }
  }
}
    `;

export const DeleteUserAccountDocument = gql`
    mutation DeleteUserAccount {
  accountDelete {
    errors {
      field
      message
    }
  }
}
    `;

export const CreateUserAddressDocument = gql`
    mutation CreateUserAddress($input: AddressInput!) {
  accountAddressCreate(input: $input) {
    address {
      id
      firstName
      lastName
      streetAddress1
      city
      country {
        code
        country
      }
      postalCode
    }
    errors {
      field
      message
    }
  }
}
    `;

export const UpdateUserAddressDocument = gql`
    mutation UpdateUserAddress($id: ID!, $input: AddressInput!) {
  accountAddressUpdate(id: $id, input: $input) {
    address {
      id
      firstName
      lastName
      streetAddress1
      city
      country {
        code
        country
      }
      postalCode
    }
    errors {
      field
      message
    }
  }
}
    `;

export const DeleteUserAddressDocument = gql`
    mutation DeleteUserAddress($id: ID!) {
  accountAddressDelete(id: $id) {
    errors {
      field
      message
    }
  }
}
    `;

export const SetDefaultUserAddressDocument = gql`
    mutation SetDefaultUserAddress($id: ID!, $type: AddressTypeEnum!) {
  accountSetDefaultAddress(id: $id, type: $type) {
    user {
      id
      defaultBillingAddress {
        id
      }
      defaultShippingAddress {
        id
      }
    }
    errors {
      field
      message
    }
  }
}
    `;

// Additional checkout operations
export const GetCheckoutDocument = gql`
    query GetCheckout($token: UUID!) {
  checkout(token: $token) {
    ...CheckoutDetailsFragment
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const GetCheckoutLinesDocument = gql`
    query GetCheckoutLines($token: UUID!) {
  checkout(token: $token) {
    lines {
      ...CheckoutLineFragment
    }
  }
}
    ${CheckoutLineFragmentDoc}`;

export const GetAvailableShippingMethodsDocument = gql`
    query GetAvailableShippingMethods($token: UUID!) {
  checkout(token: $token) {
    availableShippingMethods {
      id
      name
      price {
        amount
        currency
      }
    }
  }
}
    `;

export const GetAvailablePaymentGatewaysDocument = gql`
    query GetAvailablePaymentGateways($token: UUID!) {
  checkout(token: $token) {
    availablePaymentGateways {
      id
      name
      config {
        field
        value
      }
    }
  }
}
    `;

export const GetAvailableCollectionPointsDocument = gql`
    query GetAvailableCollectionPoints($token: UUID!) {
  checkout(token: $token) {
    availableCollectionPoints {
      id
      name
      address {
        streetAddress1
        city
        country {
          code
          country
        }
        postalCode
      }
    }
  }
}
    `;

export const ValidateAccessoryCompatibilityDocument = gql`
    query ValidateAccessoryCompatibility($accessoryIds: [ID!]!) {
  validateAccessoryCompatibility(accessoryIds: $accessoryIds) {
    isValid
    errors {
      field
      message
    }
  }
}
    `;

export const CreateAutoAccessoryCheckoutDocument = gql`
    mutation CreateAutoAccessoryCheckout($input: CheckoutCreateInput!) {
  checkoutCreate(input: $input) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const AddAutoAccessoryCheckoutLinesDocument = gql`
    mutation AddAutoAccessoryCheckoutLines($token: UUID!, $lines: [CheckoutLineInput!]!) {
  checkoutLinesAdd(token: $token, lines: $lines) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const UpdateAutoAccessoryCheckoutLinesDocument = gql`
    mutation UpdateAutoAccessoryCheckoutLines($token: UUID!, $lines: [CheckoutLineUpdateInput!]!) {
  checkoutLinesUpdate(token: $token, lines: $lines) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const RemoveCheckoutLinesDocument = gql`
    mutation RemoveCheckoutLines($token: UUID!, $lines: [ID!]!) {
  checkoutLinesDelete(token: $token, lines: $lines) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const UpdateCheckoutShippingAddressDocument = gql`
    mutation UpdateCheckoutShippingAddress($token: UUID!, $address: AddressInput!) {
  checkoutShippingAddressUpdate(token: $token, shippingAddress: $address) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const UpdateCheckoutBillingAddressDocument = gql`
    mutation UpdateCheckoutBillingAddress($token: UUID!, $address: AddressInput!) {
  checkoutBillingAddressUpdate(token: $token, billingAddress: $address) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const UpdateCheckoutShippingMethodDocument = gql`
    mutation UpdateCheckoutShippingMethod($token: UUID!, $shippingMethodId: ID!) {
  checkoutShippingMethodUpdate(token: $token, shippingMethodId: $shippingMethodId) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const UpdateCheckoutCollectionPointDocument = gql`
    mutation UpdateCheckoutCollectionPoint($token: UUID!, $collectionPointId: ID!) {
  checkoutCollectionPointUpdate(token: $token, collectionPointId: $collectionPointId) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const AddCheckoutPromoCodeDocument = gql`
    mutation AddCheckoutPromoCode($token: UUID!, $promoCode: String!) {
  checkoutAddPromoCode(token: $token, promoCode: $promoCode) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const RemoveCheckoutPromoCodeDocument = gql`
    mutation RemoveCheckoutPromoCode($token: UUID!, $promoCode: String!) {
  checkoutRemovePromoCode(token: $token, promoCode: $promoCode) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const CompleteAutoAccessoryCheckoutDocument = gql`
    mutation CompleteAutoAccessoryCheckout($token: UUID!) {
  checkoutComplete(token: $token) {
    order {
      id
      number
      status
    }
    errors {
      field
      message
    }
  }
}
    `;

export const UpdateCheckoutEmailDocument = gql`
    mutation UpdateCheckoutEmail($token: UUID!, $email: String!) {
  checkoutEmailUpdate(token: $token, email: $email) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

export const UpdateCheckoutLanguageDocument = gql`
    mutation UpdateCheckoutLanguage($token: UUID!, $languageCode: LanguageCodeEnum!) {
  checkoutLanguageCodeUpdate(token: $token, languageCode: $languageCode) {
    checkout {
      ...CheckoutDetailsFragment
    }
    errors {
      field
      message
    }
  }
}
    ${CheckoutDetailsFragmentDoc}`;

// TypeScript types for all operations
export type GetCurrentUserQuery = {
  me?: {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
    isActive: boolean;
    dateJoined: string;
    lastLogin?: string;
  } | null;
};

export type GetCurrentUserQueryVariables = {};

export type GetUserOrdersQuery = {
  me?: {
    orders?: {
      pageInfo: {
        hasNextPage: boolean;
        endCursor?: string;
      };
      edges: Array<{
        node: {
          id: string;
          number: string;
          status: string;
          created: string;
          total: {
            gross: {
              amount: number;
              currency: string;
            };
          };
        };
      }>;
    } | null;
  } | null;
};

export type GetUserOrdersQueryVariables = {
  first?: number;
  after?: string;
};

export type GetOrderDetailsQuery = {
  order?: {
    id: string;
    number: string;
    status: string;
    created: string;
    total: {
      gross: {
        amount: number;
        currency: string;
      };
    };
    lines: Array<{
      id: string;
      productName: string;
      variantName: string;
      quantity: number;
      unitPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
    }>;
  } | null;
};

export type GetOrderDetailsQueryVariables = {
  id: string;
};

export type RegisterUserMutation = {
  accountRegister?: {
    user?: {
      id: string;
      email: string;
      firstName: string;
      lastName: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
    requiresConfirmation?: boolean;
  } | null;
};

export type RegisterUserMutationVariables = {
  input: {
    email: string;
    password: string;
    firstName?: string;
    lastName?: string;
  };
};

export type LoginUserMutation = {
  tokenCreate?: {
    token?: string;
    refreshToken?: string;
    user?: {
      id: string;
      email: string;
      firstName: string;
      lastName: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type LoginUserMutationVariables = {
  email: string;
  password: string;
};

export type RefreshTokenMutation = {
  tokenRefresh?: {
    token?: string;
    refreshToken?: string;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type RefreshTokenMutationVariables = {
  refreshToken: string;
};

export type LogoutUserMutation = {
  tokenDelete?: {
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type LogoutUserMutationVariables = {};

export type ChangePasswordMutation = {
  passwordChange?: {
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type ChangePasswordMutationVariables = {
  newPassword: string;
  oldPassword: string;
};

export type RequestPasswordResetMutation = {
  requestPasswordReset?: {
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type RequestPasswordResetMutationVariables = {
  email: string;
  redirectUrl: string;
};

export type ConfirmPasswordResetMutation = {
  confirmAccount?: {
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type ConfirmPasswordResetMutationVariables = {
  email: string;
  password: string;
  token: string;
};

export type UpdateUserAccountMutation = {
  accountUpdate?: {
    user?: {
      id: string;
      email: string;
      firstName: string;
      lastName: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type UpdateUserAccountMutationVariables = {
  input: {
    firstName?: string;
    lastName?: string;
    email?: string;
  };
};

export type DeleteUserAccountMutation = {
  accountDelete?: {
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type DeleteUserAccountMutationVariables = {};

export type CreateUserAddressMutation = {
  accountAddressCreate?: {
    address?: {
      id: string;
      firstName: string;
      lastName: string;
      streetAddress1: string;
      city: string;
      country: {
        code: string;
        country: string;
      };
      postalCode: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type CreateUserAddressMutationVariables = {
  input: {
    firstName: string;
    lastName: string;
    streetAddress1: string;
    city: string;
    country: string;
    postalCode: string;
  };
};

export type UpdateUserAddressMutation = {
  accountAddressUpdate?: {
    address?: {
      id: string;
      firstName: string;
      lastName: string;
      streetAddress1: string;
      city: string;
      country: {
        code: string;
        country: string;
      };
      postalCode: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type UpdateUserAddressMutationVariables = {
  id: string;
  input: {
    firstName: string;
    lastName: string;
    streetAddress1: string;
    city: string;
    country: string;
    postalCode: string;
  };
};

export type DeleteUserAddressMutation = {
  accountAddressDelete?: {
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type DeleteUserAddressMutationVariables = {
  id: string;
};

export type SetDefaultUserAddressMutation = {
  accountSetDefaultAddress?: {
    user?: {
      id: string;
      defaultBillingAddress?: {
        id: string;
      } | null;
      defaultShippingAddress?: {
        id: string;
      } | null;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type SetDefaultUserAddressMutationVariables = {
  id: string;
  type: 'BILLING' | 'SHIPPING';
};

// Checkout types
export type GetCheckoutQuery = {
  checkout?: {
    id: string;
    token: string;
    totalPrice: {
      gross: {
        amount: number;
        currency: string;
      };
    };
    subtotalPrice: {
      gross: {
        amount: number;
        currency: string;
      };
    };
    lines: Array<{
      id: string;
      quantity: number;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      variant: {
        id: string;
        sku: string;
        name: string;
        product: {
          id: string;
          name: string;
          thumbnail?: {
            url: string;
            alt?: string;
          } | null;
        };
        pricing: {
          price: {
            net: {
              amount: number;
              currency: string;
            };
          };
        };
      };
    }>;
    shippingAddress?: {
      firstName: string;
      lastName: string;
      streetAddress1: string;
      city: string;
      country: {
        code: string;
        country: string;
      };
      postalCode: string;
    } | null;
    billingAddress?: {
      firstName: string;
      lastName: string;
      streetAddress1: string;
      city: string;
      country: {
        code: string;
        country: string;
      };
      postalCode: string;
    } | null;
    availableShippingMethods: Array<{
      id: string;
      name: string;
      price: {
        amount: number;
        currency: string;
      };
    }>;
    shippingMethod?: {
      id: string;
      name: string;
      price: {
        amount: number;
        currency: string;
      };
    } | null;
    email?: string;
  } | null;
};

export type GetCheckoutQueryVariables = {
  token: string;
};

export type GetCheckoutLinesQuery = {
  checkout?: {
    lines: Array<{
      id: string;
      quantity: number;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      variant: {
        id: string;
        sku: string;
        name: string;
        product: {
          id: string;
          name: string;
          thumbnail?: {
            url: string;
            alt?: string;
          } | null;
        };
        pricing: {
          price: {
            net: {
              amount: number;
              currency: string;
            };
          };
        };
      };
    }>;
  } | null;
};

export type GetCheckoutLinesQueryVariables = {
  token: string;
};

export type GetAvailableShippingMethodsQuery = {
  checkout?: {
    availableShippingMethods: Array<{
      id: string;
      name: string;
      price: {
        amount: number;
        currency: string;
      };
    }>;
  } | null;
};

export type GetAvailableShippingMethodsQueryVariables = {
  token: string;
};

export type GetAvailablePaymentGatewaysQuery = {
  checkout?: {
    availablePaymentGateways: Array<{
      id: string;
      name: string;
      config: Array<{
        field: string;
        value: string;
      }>;
    }>;
  } | null;
};

export type GetAvailablePaymentGatewaysQueryVariables = {
  token: string;
};

export type GetAvailableCollectionPointsQuery = {
  checkout?: {
    availableCollectionPoints: Array<{
      id: string;
      name: string;
      address: {
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      };
    }>;
  } | null;
};

export type GetAvailableCollectionPointsQueryVariables = {
  token: string;
};

export type ValidateAccessoryCompatibilityQuery = {
  validateAccessoryCompatibility?: {
    isValid: boolean;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type ValidateAccessoryCompatibilityQueryVariables = {
  accessoryIds: string[];
};

export type CreateAutoAccessoryCheckoutMutation = {
  checkoutCreate?: {
    checkout?: {
      id: string;
      token: string;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      subtotalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      lines: Array<{
        id: string;
        quantity: number;
        totalPrice: {
          gross: {
            amount: number;
            currency: string;
          };
        };
        variant: {
          id: string;
          sku: string;
          name: string;
          product: {
            id: string;
            name: string;
            thumbnail?: {
              url: string;
              alt?: string;
            } | null;
          };
          pricing: {
            price: {
              net: {
                amount: number;
                currency: string;
              };
            };
          };
        };
      }>;
      shippingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      billingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      availableShippingMethods: Array<{
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      }>;
      shippingMethod?: {
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      } | null;
      email?: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type CreateAutoAccessoryCheckoutMutationVariables = {
  input: {
    channel: string;
    lines?: Array<{
      variantId: string;
      quantity: number;
    }>;
    email?: string;
  };
};

export type AddAutoAccessoryCheckoutLinesMutation = {
  checkoutLinesAdd?: {
    checkout?: {
      id: string;
      token: string;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      subtotalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      lines: Array<{
        id: string;
        quantity: number;
        totalPrice: {
          gross: {
            amount: number;
            currency: string;
          };
        };
        variant: {
          id: string;
          sku: string;
          name: string;
          product: {
            id: string;
            name: string;
            thumbnail?: {
              url: string;
              alt?: string;
            } | null;
          };
          pricing: {
            price: {
              net: {
                amount: number;
                currency: string;
              };
            };
          };
        };
      }>;
      shippingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      billingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      availableShippingMethods: Array<{
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      }>;
      shippingMethod?: {
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      } | null;
      email?: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type AddAutoAccessoryCheckoutLinesMutationVariables = {
  token: string;
  lines: Array<{
    variantId: string;
    quantity: number;
  }>;
};

export type UpdateAutoAccessoryCheckoutLinesMutation = {
  checkoutLinesUpdate?: {
    checkout?: {
      id: string;
      token: string;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      subtotalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      lines: Array<{
        id: string;
        quantity: number;
        totalPrice: {
          gross: {
            amount: number;
            currency: string;
          };
        };
        variant: {
          id: string;
          sku: string;
          name: string;
          product: {
            id: string;
            name: string;
            thumbnail?: {
              url: string;
              alt?: string;
            } | null;
          };
          pricing: {
            price: {
              net: {
                amount: number;
                currency: string;
              };
            };
          };
        };
      }>;
      shippingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      billingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      availableShippingMethods: Array<{
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      }>;
      shippingMethod?: {
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      } | null;
      email?: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type UpdateAutoAccessoryCheckoutLinesMutationVariables = {
  token: string;
  lines: Array<{
    lineId: string;
    quantity: number;
  }>;
};

export type RemoveCheckoutLinesMutation = {
  checkoutLinesDelete?: {
    checkout?: {
      id: string;
      token: string;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      subtotalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      lines: Array<{
        id: string;
        quantity: number;
        totalPrice: {
          gross: {
            amount: number;
            currency: string;
          };
        };
        variant: {
          id: string;
          sku: string;
          name: string;
          product: {
            id: string;
            name: string;
            thumbnail?: {
              url: string;
              alt?: string;
            } | null;
          };
          pricing: {
            price: {
              net: {
                amount: number;
                currency: string;
              };
            };
          };
        };
      }>;
      shippingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      billingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      availableShippingMethods: Array<{
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      }>;
      shippingMethod?: {
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      } | null;
      email?: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type RemoveCheckoutLinesMutationVariables = {
  token: string;
  lines: string[];
};

export type UpdateCheckoutShippingAddressMutation = {
  checkoutShippingAddressUpdate?: {
    checkout?: {
      id: string;
      token: string;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      subtotalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      lines: Array<{
        id: string;
        quantity: number;
        totalPrice: {
          gross: {
            amount: number;
            currency: string;
          };
        };
        variant: {
          id: string;
          sku: string;
          name: string;
          product: {
            id: string;
            name: string;
            thumbnail?: {
              url: string;
              alt?: string;
            } | null;
          };
          pricing: {
            price: {
              net: {
                amount: number;
                currency: string;
              };
            };
          };
        };
      }>;
      shippingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      billingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      availableShippingMethods: Array<{
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      }>;
      shippingMethod?: {
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      } | null;
      email?: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type UpdateCheckoutShippingAddressMutationVariables = {
  token: string;
  address: {
    firstName: string;
    lastName: string;
    streetAddress1: string;
    city: string;
    country: string;
    postalCode: string;
  };
};

export type UpdateCheckoutBillingAddressMutation = {
  checkoutBillingAddressUpdate?: {
    checkout?: {
      id: string;
      token: string;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      subtotalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      lines: Array<{
        id: string;
        quantity: number;
        totalPrice: {
          gross: {
            amount: number;
            currency: string;
          };
        };
        variant: {
          id: string;
          sku: string;
          name: string;
          product: {
            id: string;
            name: string;
            thumbnail?: {
              url: string;
              alt?: string;
            } | null;
          };
          pricing: {
            price: {
              net: {
                amount: number;
                currency: string;
              };
            };
          };
        };
      }>;
      shippingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      billingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      availableShippingMethods: Array<{
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      }>;
      shippingMethod?: {
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      } | null;
      email?: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type UpdateCheckoutBillingAddressMutationVariables = {
  token: string;
  address: {
    firstName: string;
    lastName: string;
    streetAddress1: string;
    city: string;
    country: string;
    postalCode: string;
  };
};

export type UpdateCheckoutShippingMethodMutation = {
  checkoutShippingMethodUpdate?: {
    checkout?: {
      id: string;
      token: string;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      subtotalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      lines: Array<{
        id: string;
        quantity: number;
        totalPrice: {
          gross: {
            amount: number;
            currency: string;
          };
        };
        variant: {
          id: string;
          sku: string;
          name: string;
          product: {
            id: string;
            name: string;
            thumbnail?: {
              url: string;
              alt?: string;
            } | null;
          };
          pricing: {
            price: {
              net: {
                amount: number;
                currency: string;
              };
            };
          };
        };
      }>;
      shippingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      billingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      availableShippingMethods: Array<{
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      }>;
      shippingMethod?: {
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      } | null;
      email?: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type UpdateCheckoutShippingMethodMutationVariables = {
  token: string;
  shippingMethodId: string;
};

export type UpdateCheckoutCollectionPointMutation = {
  checkoutCollectionPointUpdate?: {
    checkout?: {
      id: string;
      token: string;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      subtotalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      lines: Array<{
        id: string;
        quantity: number;
        totalPrice: {
          gross: {
            amount: number;
            currency: string;
          };
        };
        variant: {
          id: string;
          sku: string;
          name: string;
          product: {
            id: string;
            name: string;
            thumbnail?: {
              url: string;
              alt?: string;
            } | null;
          };
          pricing: {
            price: {
              net: {
                amount: number;
                currency: string;
              };
            };
          };
        };
      }>;
      shippingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      billingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      availableShippingMethods: Array<{
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      }>;
      shippingMethod?: {
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      } | null;
      email?: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type UpdateCheckoutCollectionPointMutationVariables = {
  token: string;
  collectionPointId: string;
};

export type AddCheckoutPromoCodeMutation = {
  checkoutAddPromoCode?: {
    checkout?: {
      id: string;
      token: string;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      subtotalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      lines: Array<{
        id: string;
        quantity: number;
        totalPrice: {
          gross: {
            amount: number;
            currency: string;
          };
        };
        variant: {
          id: string;
          sku: string;
          name: string;
          product: {
            id: string;
            name: string;
            thumbnail?: {
              url: string;
              alt?: string;
            } | null;
          };
          pricing: {
            price: {
              net: {
                amount: number;
                currency: string;
              };
            };
          };
        };
      }>;
      shippingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      billingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      availableShippingMethods: Array<{
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      }>;
      shippingMethod?: {
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      } | null;
      email?: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type AddCheckoutPromoCodeMutationVariables = {
  token: string;
  promoCode: string;
};

export type RemoveCheckoutPromoCodeMutation = {
  checkoutRemovePromoCode?: {
    checkout?: {
      id: string;
      token: string;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      subtotalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      lines: Array<{
        id: string;
        quantity: number;
        totalPrice: {
          gross: {
            amount: number;
            currency: string;
          };
        };
        variant: {
          id: string;
          sku: string;
          name: string;
          product: {
            id: string;
            name: string;
            thumbnail?: {
              url: string;
              alt?: string;
            } | null;
          };
          pricing: {
            price: {
              net: {
                amount: number;
                currency: string;
              };
            };
          };
        };
      }>;
      shippingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      billingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      availableShippingMethods: Array<{
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      }>;
      shippingMethod?: {
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      } | null;
      email?: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type RemoveCheckoutPromoCodeMutationVariables = {
  token: string;
  promoCode: string;
};

export type CompleteAutoAccessoryCheckoutMutation = {
  checkoutComplete?: {
    order?: {
      id: string;
      number: string;
      status: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type CompleteAutoAccessoryCheckoutMutationVariables = {
  token: string;
};

export type UpdateCheckoutEmailMutation = {
  checkoutEmailUpdate?: {
    checkout?: {
      id: string;
      token: string;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      subtotalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      lines: Array<{
        id: string;
        quantity: number;
        totalPrice: {
          gross: {
            amount: number;
            currency: string;
          };
        };
        variant: {
          id: string;
          sku: string;
          name: string;
          product: {
            id: string;
            name: string;
            thumbnail?: {
              url: string;
              alt?: string;
            } | null;
          };
          pricing: {
            price: {
              net: {
                amount: number;
                currency: string;
              };
            };
          };
        };
      }>;
      shippingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      billingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      availableShippingMethods: Array<{
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      }>;
      shippingMethod?: {
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      } | null;
      email?: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type UpdateCheckoutEmailMutationVariables = {
  token: string;
  email: string;
};

export type UpdateCheckoutLanguageMutation = {
  checkoutLanguageCodeUpdate?: {
    checkout?: {
      id: string;
      token: string;
      totalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      subtotalPrice: {
        gross: {
          amount: number;
          currency: string;
        };
      };
      lines: Array<{
        id: string;
        quantity: number;
        totalPrice: {
          gross: {
            amount: number;
            currency: string;
          };
        };
        variant: {
          id: string;
          sku: string;
          name: string;
          product: {
            id: string;
            name: string;
            thumbnail?: {
              url: string;
              alt?: string;
            } | null;
          };
          pricing: {
            price: {
              net: {
                amount: number;
                currency: string;
              };
            };
          };
        };
      }>;
      shippingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      billingAddress?: {
        firstName: string;
        lastName: string;
        streetAddress1: string;
        city: string;
        country: {
          code: string;
          country: string;
        };
        postalCode: string;
      } | null;
      availableShippingMethods: Array<{
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      }>;
      shippingMethod?: {
        id: string;
        name: string;
        price: {
          amount: number;
          currency: string;
        };
      } | null;
      email?: string;
    } | null;
    errors: Array<{
      field: string;
      message: string;
    }>;
  } | null;
};

export type UpdateCheckoutLanguageMutationVariables = {
  token: string;
  languageCode: string;
};

// Generated hooks (placeholder - these would be generated by codegen)
export const useGetAutoAccessoryProductsQuery = (_options: any) => ({});
export const useGetAutoAccessoryProductQuery = (_options: any) => ({});
export const useCheckoutDetailsQuery = (_options: any) => ({});
export const useCheckoutCreateMutation = () => [() => {}];
export const useCheckoutLinesAddMutation = () => [() => {}];
export const useCheckoutLinesUpdateMutation = () => [() => {}];
export const useCheckoutLinesDeleteMutation = () => [() => {}];
export const useCheckoutCompleteMutation = () => [() => {}];
export const useTokenCreateMutation = () => [() => {}];
export const useTokenRefreshMutation = () => [() => {}];
